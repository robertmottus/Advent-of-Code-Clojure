(ns year2020.day05.part1
  (:require [ysera.test :refer [is is= is-not]]
            [clojure.math.numeric-tower :as math :refer [expt]]
            [clojure.string :as str :only [index-of]]))

; https://adventofcode.com/2020/day/5

(defn string->position
  {:doc  "
  Calculates seat row number coded as successive choices of front (F) or back (B) halves of the rows.
  In the same fashion used for calculation of seat column number, with choices of left (L) or right (R) side.
  Second arg specifies the chars used for coding first and second half respectively."
   :test (fn []
           (is= (string->position "BFFFBBF" "FB") 70)
           (is= (string->position "RLR" "LR") 5)
           ; Note to correspondence to binary numbers:
           (is= (string->position "00" "01") 0)
           (is= (string->position "01" "01") 1)
           (is= (string->position "10" "01") 2)
           (is= (string->position "11" "01") 3)
           (is= (string->position "10000" "01") 16)
           )}
  [position-string, position-codes]
  (->> position-string
       (replace {(get position-codes 0) 0 (get position-codes 1) 1})
       (apply str)
       (str "2r")
       (read-string)
       ))

(defn string->position-old
  {:doc  "
  Calculates seat row number coded as successive choices of front (F) or back (B) halves of the rows.
  In the same fashion used for calculation of seat column number, with choices of left (L) or right (R) side.
  Second arg specifies the chars used for coding first and second half respectively."
   :test (fn []
           (is= (string->position-old "BFFFBBF" "FB") 70)
           (is= (string->position-old "RLR" "LR") 5)
           ; Note to correspondence to binary numbers:
           (is= (string->position-old "00" "01") 0)
           (is= (string->position-old "01" "01") 1)
           (is= (string->position-old "10" "01") 2)
           (is= (string->position-old "11" "01") 3)
           (is= (string->position-old "10000" "01") 16)
           )}
  [pos-string, codes]
  (->> pos-string
       (reverse)
       (map-indexed
         (fn [idx ch]
           (let [pos-factor (math/expt 2 idx)
                 low-high-factor (str/index-of codes ch)]
             (* pos-factor low-high-factor)
             )))
       (reduce +)
       ))

(defn seat-id
  {:test (fn []
           (is= (seat-id "BFFFBBFRRR") 567)
           )}
  [seat-string]
  (let [row (string->position (subs seat-string 0 7) "FB")
        col (string->position (subs seat-string 7 10) "LR")]
    (+ (* 8 row) col))
  )

(defn missing-seat-id
  {:test (fn []
           (is= (missing-seat-id [1 3 4]) 2)
           (is= (missing-seat-id [4 3 1]) 2)
           )}
  [ids]
  (as-> ids $
        (sort $)
        (map (fn [id next-id] [id (- next-id id)]) $ (drop 1 $) )
        (filter (fn [[id diff]] (= 2 diff)) $)
        (first $)
        ((fn [[id diff]] (inc id)) $)
        )
  )

(defn part1
  [position-string]
  (->> position-string
      (str/split-lines)
      (map seat-id)
      (apply max)
      )
  )

(defn part2
  [position-string]
  (->> position-string
      (str/split-lines)
      (map seat-id)
      (missing-seat-id)
      )
  )

(comment
  (def puzzle-input "FBFBBFBRRL\nBBFFBFFRLR\nFBBFFBBLLL\nFBFBFBFRRR\nFBBBFFFLLL\nFFBFBBFLLR\nBFBBBFBLRR\nBFBBBFFRLL\nFBFFBFFLLL\nBFBFBFFRLR\nFBFBFFBLLL\nFBFFBBFLLR\nFBFBBBBLRR\nBFFBBBFLLL\nBFBBFBBLLL\nFBFFFFBLRL\nBFBFFFFLRR\nBFBBFFBRRL\nFBFFFFBLLL\nFBBBBFFRLR\nBFBBBFBLRL\nBBFFBFBRRL\nFBBFFFBRRL\nFFBFBBFRRL\nFFFFBBFLLR\nFBFFFBBRLR\nFFBBFBBRRR\nFFBFBFFRLL\nBFFFFFBLRL\nFFBBBFBLLR\nFBBFFBBLRR\nFBBFFBBRRL\nFFBBBFFRRL\nFFBFFBBRLL\nFBBFFBFLLL\nBFBBFBBRRL\nFFFFFBBRLR\nFBBBFFFLRL\nBFBBFBBRRR\nBFBFFBFLLL\nBFFBFBBLRL\nFBFBFFFLRR\nFBFBBBBLLR\nFFFFBFFRLR\nBFFBFBBLRR\nBBFFBBBLRL\nFBBFFFFLLL\nFBFBFFFRLL\nFFFBFBFRLL\nBBFFFBFLRR\nBFFBBBBLRL\nBBFFBBFLLL\nFBBBBBFLLR\nBFFFFBBRRR\nFFBBFBBRLR\nFBFBFFFRRL\nBFFBFBFRLL\nFBFBFBBLRR\nBBFFBBBRLL\nFFBBFFFLRL\nFFFBFBBLLR\nBFFFBFFLLL\nBFFFBFFLRL\nBFFBFFBLLR\nBFBBFBBLRL\nFFFBFFFRRL\nBFFFBBFLRR\nFFBBBFFRRR\nFBBFBBBRLR\nFFBFBFFLRL\nBBFFBFBRRR\nFBBFFFBLLL\nFBFFBBFRRR\nBFBFFFBLLL\nFFFFBFFLLR\nFBFBFBFLRR\nBFFFBBFRLL\nBFBBBFFLRR\nFFBBFBBLRR\nBFFFFBBRLR\nBFBFBBBLLR\nBFFFFBBLLL\nFBBFFBBRLL\nFBFFBFBRRR\nBFBFBFFLRR\nFFFFBBBRRL\nFBBBFFBRRR\nFFFFBFFLLL\nBFBFBFBRRR\nFBBBBBFRRR\nBFBBBBBRLL\nBFBFFBBRRL\nBFFFFFFRLL\nBFBBBBFRLL\nFBFFFFFLLR\nFFFBBFBRRL\nBFBBFBFRRL\nFFFFBBFRLL\nFFFFFBBRRL\nFFBFFBFRRR\nFFBBFBBRRL\nBFBBFFFRLR\nBBFFFFBRLL\nFBFFBFBLRL\nFBFBBBFRLR\nBFBFBFFLRL\nBFFFFFBLRR\nFBFFBBFRLR\nFBBFFBBLLR\nBFFFBFFLLR\nBFBFFBFRLR\nBFBFFBBRLR\nFBBBBFBLLL\nBFBFBBFLLL\nFBBFBBBLRR\nFBBFBFBRLR\nBFBBFBFLRR\nBFFFFFFLLR\nBFBFBBFLLR\nFFBBBFBLRR\nFFBBBBBRLR\nFFFBBFFRRR\nFFFFBFBLRL\nBBFFBFBRLR\nBBFFBFFLRL\nBBFFFFBRRR\nBFBBFFBRLR\nFBBBBBBLLL\nFFBFFFBRRL\nFBFFBBBLRL\nFBBFBBFRRL\nFBBBBFBRRR\nBFFFFFFLRR\nBFBBBFBLLL\nFFBBFBFLRR\nFFFFBBFLRL\nFBFBBFFLRL\nFBFBBFFLLL\nFFFBBFFLLR\nBFBBFBFLLR\nFFFFFBBLRR\nFFBFFFFRLL\nBFBFFFFLRL\nBFFBBBBLRR\nFBBFFFBRRR\nFFFBBBBRLL\nBFBFBBBRRL\nBBFFFBFLLR\nFBBBFBBLRR\nFFBBBFBRRR\nBBFFBFFRLL\nFFFBBBFRLR\nBBFFFBFRLR\nFBFBBFBRRR\nBFBFBFBLRL\nFFFBFBFRRR\nFFBFFFFLRR\nFFFFBFFLRL\nFFBBBBFRLL\nFFFFBBBLRR\nFBBBBBBLRL\nBFFBBBFLLR\nFFBBFBBLLL\nFFFBBBBLLR\nBFFBBBBRLL\nFBBFBFFRRR\nBBFFBFFRRL\nFFBFBFFLLL\nBFFBBFBLLR\nFFFFBFBRRL\nFFBFBBFLRL\nFBBFFFFLRL\nFBBBFFFLRR\nBFBBBBFRRR\nFBFBFBBRRL\nBFFFFBFRLR\nBFBFFBBLRR\nFFFBBBFLRR\nFBBBFBFRRR\nFFFFBBBRLR\nFFFFBFBLLR\nBFFFBBFLLR\nFFFBFFFLLL\nBBFFFBFRRR\nFFBFBBBLRR\nFFFFBFFLRR\nFBFFBBBLRR\nBBFFFBBLRL\nFBBBFBFLRR\nBFFBBFBRRR\nFBFFBFFRLL\nFBFBFBBLLL\nBBFFBFFRRR\nBFFBFBBLLR\nFBFBFFFRRR\nBFBFFBBLRL\nFFBBBFBLRL\nBFFBBFFRLR\nBFFFBBBLLL\nBFFFFFFRRR\nFBBBBFBLRL\nBFFFFFFRRL\nFFFBFFFLRR\nFFBBFFFRRL\nBFFBFBFLRL\nFBBBFBBRLL\nBFFBFBFRRR\nFFBFFFFLRL\nFBBFBFFLRL\nFFFFBFFRRR\nBBFFBBFLRR\nFBBBFFFRRR\nFFFBFFBLLL\nFBBBFFFLLR\nFFBFFFBLLR\nFFBBFFBRRR\nBBFFFBBRRL\nFFFFBBFRLR\nBFFBFBBLLL\nFFFBBFFLRR\nFBBBFFFRLL\nFFBBBBBRRR\nBFBBFBFLRL\nBFBBBBBRRL\nFBFBFBBLLR\nFFBFFFBRLL\nFFFFBBFLLL\nFFFBBFBLLR\nFFFBBBBLRL\nBFFBFFFLLL\nFFBFFBFRRL\nFBBFFFBLLR\nBBFFFFBLRL\nBFFFBBBRLR\nBFFBFFBLRL\nBBFFBFBLLL\nFBFBFBBRLL\nFFFBBFBRLL\nBBFFFBFRRL\nFBBBFFFRRL\nBFBFBFBRLL\nBFBBFFFLRR\nFFFFBFBRLL\nFFBBBFBRLL\nBFBBFFFLLL\nBFBFFFBRRL\nFBFBFBFRLR\nFBFFBBBRLL\nBBFFBFBLRL\nBFBBBBBLLL\nFBBFBFFRLR\nFFFBFBFRRL\nBFBBFBFLLL\nBFFFFBFLLR\nFBFBFFBLRL\nFBFBFFBRRR\nBFBFFFFLLR\nBFFFFBFRRL\nBFFFFBFLRR\nBBFFFFFRRL\nFFFBFFBRRR\nBBFFBFFLLL\nFBFFFBBLLL\nFBBFBBFLRR\nBFBBBBFRRL\nBFBBBFBRLR\nBFFFFFBRLR\nFFBFBBBRRL\nFBFBFFBRLL\nBFFFBFBLRL\nFFBFBFFRLR\nFBFFFBBRRR\nBFFBFFBLRR\nBFBFBFBLRR\nFBFFBFBLLL\nBFBBBFBRRL\nFBBFFBFRLL\nFFBFBFBRLR\nBBFFFFFLLL\nBFBBBFBRRR\nFFBBFBFRRR\nBFFBFBFLRR\nFBBBFBFRLL\nFBBBBBBRLL\nFBFBFBBRLR\nBFBBBFFRLR\nFBFBBFFLLR\nBBFFBBBLLL\nBFFFBFBLLR\nFFBBBBFLLR\nBFFBBFBRLR\nFBFBBBFLLL\nFFBFBFFLLR\nFFBFFFFLLR\nFBBFBFFRLL\nBFFBBBFLRL\nFFFBFFBRRL\nFFFBFBBRRL\nFFBFBBFRLL\nBBFFBFBLRR\nBBFFFBBRRR\nFBFFFFBLRR\nBFBFBFBRLR\nBFBBFFBLLL\nBFBFBFFRRL\nBFBFFBBRRR\nFBBFBBFRLR\nBFBBFFFRLL\nBFBFFFBLRR\nFBBFFBBRLR\nFFBFFBBRLR\nFFBBBBFLRL\nBFFFBFBRRL\nBBFFBBBLLR\nBFBFBFBLLR\nFFFBFFFRLR\nBFFBBBBLLR\nBFBBFFBRRR\nBFFFBFBLRR\nBFBFBBBRRR\nFBBFBBFLLR\nFBFFFBFRLL\nFBBBBFFLRL\nFFBBFBFLLL\nBFBFFBFLRR\nFFFFBBBRLL\nFBFFBBFLRL\nFFBFFFFRRR\nBFBBFBBLLR\nFFBBFBBLRL\nFFBBFBFRLR\nFFFFBBBLLR\nBFFBBFBRRL\nFBFFBFFRRL\nFBBFBBBRRL\nFFBFFFBRLR\nBBFFFBBLRR\nBFFBBFFRRR\nFBFFFBFRRR\nFBBFBBFRLL\nFFBFBFBLLR\nBBFFBFFLRR\nFBBFFBBLRL\nFBFFFFFLRR\nFFBBFBBRLL\nFFBBBBBLRL\nFFFBBFBRRR\nBFBFFFBRRR\nFFBFFFFRRL\nBBFFFFBRLR\nFFBFFBBLLL\nBFBFFFFRLR\nFBBFBBBRRR\nFFFBFFFLRL\nBFBFBFFLLR\nBBFFFFFRLL\nBFBFBFFRLL\nBFFFBBBRLL\nBFBFBFFRRR\nBFFFBFFRLR\nFFBBFFBRRL\nFFBFFFBRRR\nFBFFBBFLLL\nBFBBFFFLLR\nBFBBBFFRRR\nFFBFBBFRRR\nFFFBBBBRLR\nFBFFFBBLLR\nFBBBFBFRLR\nFBFBBFFRLR\nFFFBFFBLRR\nFFBBBBFLLL\nFBFBFBFLLL\nBFBFFBFLLR\nFFFBBFFLLL\nFBFBFBFLLR\nBFBFBBFLRR\nFBFFBBBRRL\nBFFBBBFRLR\nBBFFFBFLLL\nBFFBFFBRRL\nBFFFFFFRLR\nFBFFBFFRRR\nFFFFBFFRLL\nFFFBBFBLRL\nBFFBBBFLRR\nBFFFBBFLRL\nFFBFFFFLLL\nBFFBFFFRRL\nBFFFFFFLLL\nFFFBFBBLLL\nFBBBBBBRRL\nBFFBFBFRRL\nBFBFFFFRLL\nBFFFBFBLLL\nBFBFFFBRLL\nFFFBBBBLRR\nBFFBFFFLRR\nBFFBBFBRLL\nFBFFBBBRLR\nFBBBFFBRRL\nFBBBBFFLRR\nFFFFFBBRRR\nBFBBBFFLLL\nFFBFBFBRLL\nFBFBBBFLLR\nBBFFFFFLLR\nFFBFFBFRLL\nFFFBBBFRRL\nFFFBBFBRLR\nFFBFBFBRRR\nBFFBFBFLLR\nBFFFFBFRLL\nBFFBBBFRRR\nBFFBFBBRRR\nBFFBBBBRLR\nFFBFFBFLLR\nFFBBFFBRLR\nFFBFBBBRRR\nFFBBFFBLLL\nFFFFBFBLRR\nBFBFFBFRRR\nFFBFFBFLRL\nFFBBBFFLRR\nFFBFBBFLLL\nFBFBBFBLRL\nFFBBFFFRRR\nFFBFFFBLRR\nBFFBFFBRLL\nFBFBBBBRRR\nBFFFBFFLRR\nFBBBBFFRRR\nFFBFFFBLLL\nBFBFBBFRLR\nFFBFFFBLRL\nBBFFFBBRLR\nBFFBBBFRRL\nFFFBFBBRRR\nFFBBFFFRLL\nFBFFBBFLRR\nBFFBBBBLLL\nFBFFFFBRRR\nFBBFFFBRLR\nFFFBBBFRRR\nFBBBBBBLRR\nFFBBBFFRLR\nFBBBFFBRLR\nFBBFBFBLRL\nFBBBFBFLLR\nFBBFFBFRLR\nFBFFFFBRLR\nBFBFFFFRRL\nBFBFBFBRRL\nBFFFFBFRRR\nFFFBBFFRLL\nBBFFBBFRLR\nFFFBFBFLLL\nFBBBFBFLRL\nFBFBBFBRLL\nBFFBFFFLLR\nBFFBBBFRLL\nBFBBBFBLLR\nFBFBFFFLRL\nFFBFFFFRLR\nFFBFBBBRLR\nBFBBBFFLLR\nBFFFFFBLLR\nFBBFBFFRRL\nBFFBFBFRLR\nFBFFBBFRRL\nBBFFBBFRLL\nFBFFBFBLRR\nFBFBFBFRLL\nFFFBBBFLLR\nFBFBFBBRRR\nFBFBBFBLRR\nFFBFBBBLRL\nFFBFBFBLLL\nFFFBBBBRRL\nFBBBBBBRLR\nBBFFFFBLLL\nFFBBBBBRLL\nBFFFBBFRRR\nBBFFFFBLRR\nFBFFFFFLRL\nBFBFFFBLRL\nFBBBFBBRRR\nBFFBBBBRRL\nFBFFFBFRRL\nBBFFBBFLRL\nFBBFFBFLLR\nFBFBFBBLRL\nFBFBFFFLLR\nBFFFBBFRRL\nBFBFBBBRLR\nBFFBFBBRLR\nBFFFBFFRRR\nBBFFFFBRRL\nFFBFBBFLRR\nBFFFBBBLRL\nFBBBFBBLRL\nFFBBBBFLRR\nBFFFBFBRRR\nBFFBBFFLRR\nFBFFFBFLLL\nBFFBFFFLRL\nFFFFBBBLRL\nFFBBBBBRRL\nFBBBFFBLLR\nBBFFFBBRLL\nFBFFBFBRLL\nBFFFBFBRLL\nFBFFBFFLRL\nFFFFFBBLRL\nFBFBFFBLLR\nFFFBFBBLRL\nFBFFBBBRRR\nFFFBBFFRRL\nFBFBBFFLRR\nFBBFBFFLLL\nBFFFBFFRRL\nFFBFFBBRRR\nBFBBBBFLLL\nBFFFBFFRLL\nFBFFBFFLLR\nBFFBBFBLLL\nBBFFFBBLLL\nFBFBBBBLRL\nBBFFBFBLLR\nBBFFBBFRRR\nBFFBFFFRRR\nFBBFBBFLRL\nFFBFBFBRRL\nFFFBFFFLLR\nBFBFBFFLLL\nFFFBFBBRLL\nFFBFBFFLRR\nBFFFFFFLRL\nFBBFFFBRLL\nFBBFBBBLLR\nFBBBFFBLLL\nBBFFBBFLLR\nFFFFFBBLLR\nFBBBFFFRLR\nFBBFFFFRRR\nBFBFFBFLRL\nFFFBFFFRRR\nFBFFFFFLLL\nFFBFBBBLLL\nFFBBFFBLRR\nFFFFBBFRRL\nFBFFBBBLLL\nFFFBBFFRLR\nBFBFBBBLRL\nFBFFBBFRLL\nFBFBFFFRLR\nFFBBBFFLLL\nFBBFFBFLRR\nBFBFBBBRLL\nBFFBBFFLLL\nBFFBBFFRLL\nFFFBFFFRLL\nFBFBBBFRLL\nFBBBFBBLLL\nFBFBFFBRRL\nFBFBBBFLRR\nFBBBBBFLRL\nFBBFFFBLRL\nBFFFBBBLLR\nFBFBBFBLLL\nBFBBBBBLRL\nBFBBBBBLLR\nFFBFFBFRLR\nBFBBBBFLLR\nFFBBFFFLLL\nFFBFBFBLRL\nFFBBFFFLRR\nFBFBBFBLLR\nFBBFFBFRRR\nFBBFBBFRRR\nBFFBFBFLLL\nFBBFBBBRLL\nBFFFFBBLRR\nBBFFFFFLRL\nFFFBBFBLRR\nBFBFBFBLLL\nFFBBFFBRLL\nFFBBFBFRRL\nFFFBFFBRLL\nFBBBFBFLLL\nBFFBBFFRRL\nFBFFBFFLRR\nFFFFBFBLLL\nBFFFBBFLLL\nFFBBBFBRRL\nBFFBFFFRLR\nFBBBFFBLRL\nFFBBFBFRLL\nFFFBBFBLLL\nFFBBBFBRLR\nFFFBFBFLRL\nFBBFBBBLLL\nFFBFBFBLRR\nBFFFBFBRLR\nBFFBFFBRLR\nBFFFBBBRRL\nFFFFBFBRRR\nBFFBBFFLLR\nFFFBFFBRLR\nFBBFBFFLRR\nFFFFFBBLLL\nBFFFBBBRRR\nBFBFBBBLRR\nFBBFFFBLRR\nBFFFFBBLLR\nFFFBBFFLRL\nBFBBFBFRRR\nFFFBFBFLRR\nFFBFBBFRLR\nFFBFFBFLRR\nFFFBBBBLLL\nBFFBBFBLRL\nFFFBBBFRLL\nFFBBBBFRRL\nFFFFBFBRLR\nFBFFFBBLRL\nFBBBBBBLLR\nBFFFFFBRRR\nFBFFFFFRRR\nFBBBFBBLLR\nFFFBFFBLRL\nFBBFBFBRLL\nFBFFBFBLLR\nFBFFFBFLLR\nFBFBBFFRLL\nFBFFFFBRRL\nBFBFFFFLLL\nFFBFFBBLRR\nFBBFFFFRRL\nFFBFFBBLRL\nFFBBFBFLLR\nFFBBBFBLLL\nFFFBBBFLRL\nFBFFFFFRLR\nFBBFBBFLLL\nFBBBBFBLLR\nFFFBFFBLLR\nFBBBBFFLLL\nFBBFBBBLRL\nFFBBFBBLLR\nFBFBBFBRLR\nFFFFBBFLRR\nFBBBBBFRRL\nFBFBBBBRRL\nFBFFBFBRLR\nBFBFBBFRRL\nFBFBBBFRRR\nBFBFFBBLLR\nBFBFFFBRLR\nFFBFFBBLLR\nBBFFFBFLRL\nFBBBBBBRRR\nBFFFFBFLLL\nFFBBBFFRLL\nFBBFBFBRRL\nFBBFFFFLLR\nFBFFFBFLRR\nBFBFBBFLRL\nFBFFFFBLLR\nBBFFFFFRRR\nBFFFFFBRLL\nFFFFFBBRLL\nFBFBBBBLLL\nBFBFFBBLLL\nFBFFFBBRRL\nFBBFBFBLRR\nBFBBFFFRRL\nFBFBBBFLRL\nFBBFFBBRRR\nFBBBFFBLRR\nBFBFBBFRRR\nFBBBBFBLRR\nFBFFFBFRLR\nFBBFBFBRRR\nFFFFBBFRRR\nBBFFFBFRLL\nFFBBBFFLRL\nBBFFFBBLLR\nFBBBFBBRLR\nFBFBFBFRRL\nFBFBFFBRLR\nBFBBBBBRRR\nFBBBBBFLLL\nFBFFBFFRLR\nFBBFFFFRLR\nFBFBBBBRLR\nFFBBBBBLLR\nBFBBFFFRRR\nBFBBBBFLRL\nFBFFFBBLRR\nBFBFFBFRLL\nFBFBBFFRRR\nFFBFFBBRRL\nBFBFFBBRLL\nBFBBFFBLLR\nBFBBFBBRLL\nBFBBBBFRLR\nFFBBFBFLRL\nBFFBFFFRLL\nFBBBFBBRRL\nBBFFBBFRRL\nFBBFBFFLLR\nBFFFFBFLRL\nFBBBBFFRRL\nFBBBBFFLLR\nFFBBFFFRLR\nFBFFFBBRLL\nBFBFFFFRRR\nBFBBFFBLRL\nBFBBFFBLRR\nBBFFBFBRLL\nFBBFFFFRLL\nBBFFFFBLLR\nFFFFBFFRRL\nFFBFBFFRRR\nFBFBBBFRRL\nBFFFFBBRLL\nBFFFFBBRRL\nFBFBFFBLRR\nFFFBBBFLLL\nFFBBBBFRRR\nFBBBBBFRLL\nBBFFBBBLRR\nFBBBBFBRRL\nFBBBBFBRLR\nFFBFBFFRRL\nFBFBFBFLRL\nBFFBFFBRRR\nBFFBBFBLRR\nFBBFFFFLRR\nBFBFFBFRRL\nFFBBBBBLRR\nFBFFBBBLLR\nBFBBFBBLRR\nBFBFBBFRLL\nFFBFBBBLLR\nFFFBFBBRLR\nFFBBFFBLLR\nFFBFFBFLLL\nFBBBFBFRRL\nBFBBBFFLRL\nBFBBFFFLRL\nFBFBBFFRRL\nFFFBFBFRLR\nFBBBFFBRLL\nFBBBBFBRLL\nFBBBBBFLRR\nBFBBFBFRLL\nBFBBBBBLRR\nFFFBBBBRRR\nFBBFFBFLRL\nFFBFBBBRLL\nBFFBFBBRLL\nBBFFFFFRLR\nFFFBFBFLLR\nFBFFBFBRRL\nBFFFBBBLRR\nBFBBFBBRLR\nFBBBBBFRLR\nFBFFFBFLRL\nFFBBBBFRLR\nBFFFFFBRRL\nBFFFFFBLLL\nBFBFBBBLLL\nBBFFFFFLRR\nFBBFBFBLLR\nBFBFFFBLLR\nFBFFFFFRRL\nFFFFBBBRRR\nBFBBFBFRLR\nBFBBBFBRLL\nBFFFFBBLRL\nFFFFFBFRRR\nFFBBFFBLRL\nBFBBBFFRRL\nBBFFBFFLLR\nFFBBBBBLLL\nFFFBFBBLRR\nFBFBFFFLLL\nFFFFBBBLLL\nBFFBBBBRRR\nFBFFFFFRLL\nFBFBBBBRLL\nBFBBBBBRLR\nBFFBFFBLLL\nBFFBBFFLRL\nFBFFFFBRLL\nFFBBFFFLLR\nBFFBFBBRRL\nFBBFFBFRRL\nFBBFBFBLLL\nBFBBFFBRLL\nBFBBBBFLRR\nFFBBBFFLLR\nFBBBBFFRLL")
  (time (part1 puzzle-input)) ; 828
  (time (part2 puzzle-input)) ; 565
  )